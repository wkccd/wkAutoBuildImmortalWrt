name: Auto Build ImmortalWrt and Build Custom Installer ISO

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '1024'
      include_docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false
      download_url:
        description: '请输入下载地址(扩展名 .img.gz/.img.xz/.img.zip)'
        required: true
        default: 'https://default.example.com/file.img.gz'

jobs:
  # 第一个项目的构建
  build_immortalwrt:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/x86-64/build.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ github.event.inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ github.event.inputs.pppoe_account }}" || -z "${{ github.event.inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt-x86-64-efi
        run: |
          profiles="${{ github.event.inputs.profile }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          IFS=',' read -r -a profile_array <<< "$profiles"
          
          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"
            
            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/shell/prepare-packages.sh:/home/build/immortalwrt/prepare-packages.sh" \
              -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ENABLE_PPPOE=${{ github.event.inputs.enable_pppoe }} \
              -e PPPOE_ACCOUNT=${{ github.event.inputs.pppoe_account }} \
              -e PPPOE_PASSWORD=${{ github.event.inputs.pppoe_password }} \
              immortalwrt/imagebuilder:x86-64-openwrt-24.10.2 /bin/bash /home/build/immortalwrt/build.sh
          done

      - name: Generate Firmware SHA-256
        run: |
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}
          for file in *squashfs-combined-efi.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Create info
        run: |
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            extra_content="#### 默认带docker"
            echo -e "\n $extra_content" >> ${{ github.workspace }}/info.md
          else
            echo -e "NO docker"
          fi

      - name: Upload ImmortWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Autobuild-x86-64
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.img.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger ISO Generation in Second Project
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"event_type":"another-workflow-trigger","client_payload":{"firmware_url":"https://github.com/wkccd/wkAutoBuildImmortalWrt/releases/download/Autobuild-x86-64/immortalwrt-24.10.2-x86-64-generic-squashfs-combined-efi.img.gz"}}' \
            https://api.github.com/repos/wkccd/img-installer/dispatches


  # 第二个项目的工作流，生成 ISO
  build_installer_image:
    runs-on: ubuntu-22.04
    needs: build_immortalwrt  # 依赖第一个任务完成

    steps:
      - name: Checkout second project repository
        run: |
          git clone https://github.com/wkccd/img-installer.git
          cd img-installer

      - name: Set executable permissions for scripts
        run: |
          chmod +x "${{ github.workspace }}/img-installer/custom.sh"
          chmod +x "${{ github.workspace }}/img-installer/supportFiles/custom/build.sh"

      - name: Validate Download URL
        run: |
          DEFAULT_URL="https://default.example.com/file.img.gz"
          USER_INPUT_URL="${{ github.event.inputs.download_url }}"
          
          if [[ "$USER_INPUT_URL" == "$DEFAULT_URL" ]]; then
            echo "❌ 错误：请修改默认下载地址！当前地址为无效占位符。"
            exit 1
          fi
          
          if [[ ! "$USER_INPUT_URL" =~ ^https?://.+\.[gG][zZ]$|^https?://.+\.[xX][zZ]$|^https?://.+\.[zZ][iI][pP]$ ]]; then
            echo "❌ 错误：地址需以 http(s) 开头且扩展名为 .gz/.xz/.zip"
            echo "当前输入：$USER_INPUT_URL"
            exit 1
          fi

      - name: "Build Image"
        run: |
          download_url="${{ github.event.inputs.download_url }}"
          ./custom.sh "$download_url"

      - name: "Publish"
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: "Custom-Installer-x86_64-ISO"
          body_path: "${{ github.workspace }}/img-installer/supportFiles/custom/info.md"
          files: |
            img-installer/output/custom-installer-x86_64.iso
          token: "${{ secrets.GITHUB_TOKEN }}"
